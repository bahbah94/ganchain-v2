
//! Autogenerated weights for `frame_election_provider_support`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-08-22, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `s-02-v-02`, CPU: `AMD Ryzen 9 5900X 12-Core Processor`
//! EXECUTION: `Some(Wasm)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("gpu-dev")`, DB CACHE: 1024

// Executed Command:
// ./target/production/gpu
// benchmark
// pallet
// --chain=gpu-dev
// --steps=50
// --repeat=20
// --pallet=frame_election_provider_support
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/gpu/src/weights/frame_election_provider_support.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `frame_election_provider_support`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> frame_election_provider_support::WeightInfo for WeightInfo<T> {
	/// The range of component `v` is `[1000, 2000]`.
	/// The range of component `t` is `[500, 1000]`.
	/// The range of component `d` is `[5, 16]`.
	fn phragmen(v: u32, _t: u32, d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_823_469_000 picoseconds.
		Weight::from_parts(4_851_924_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 92_221
			.saturating_add(Weight::from_parts(3_987_434, 0).saturating_mul(v.into()))
			// Standard Error: 9_428_395
			.saturating_add(Weight::from_parts(957_960_150, 0).saturating_mul(d.into()))
	}
	/// The range of component `v` is `[1000, 2000]`.
	/// The range of component `t` is `[500, 1000]`.
	/// The range of component `d` is `[5, 16]`.
	fn phragmms(v: u32, _t: u32, d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_299_316_000 picoseconds.
		Weight::from_parts(3_335_875_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 77_745
			.saturating_add(Weight::from_parts(3_154_469, 0).saturating_mul(v.into()))
			// Standard Error: 7_948_383
			.saturating_add(Weight::from_parts(853_189_746, 0).saturating_mul(d.into()))
	}
}
